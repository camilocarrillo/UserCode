// -*- C++ -*-
//
// Package:    HSCPHUNT
// Class:      HSCPHUNT
// 
/**\class HSCPHUNT HSCPHUNT.cc beta/HSCPHUNT/src/HSCPHUNT.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Camilo Andres Carrillo Montoya
//         Created:  Mon Mar 16 22:50:16 CET 2009
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

#include "FWCore/Framework/interface/ESHandle.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include <DataFormats/RPCRecHit/interface/RPCRecHit.h>
#include "DataFormats/RPCRecHit/interface/RPCRecHitCollection.h"
#include <DataFormats/RPCDigi/interface/RPCDigiCollection.h>
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
 
#include "Geometry/RPCGeometry/interface/RPCGeometry.h"
#include <Geometry/RPCGeometry/interface/RPCRoll.h>
#include <Geometry/Records/interface/MuonGeometryRecord.h>
#include <Geometry/RPCGeometry/interface/RPCGeomServ.h>
#include <Geometry/CommonDetUnit/interface/GeomDet.h>
#include <DataFormats/TrackingRecHit/interface/TrackingRecHit.h>
#include "RecoMuon/TransientTrackingRecHit/interface/MuonTransientTrackingRecHit.h"


//
// class decleration
//

class HSCPHUNT : public edm::EDAnalyzer {
   public:
      explicit HSCPHUNT(const edm::ParameterSet&);
      ~HSCPHUNT();
      edm::ESHandle <RPCGeometry> rpcGeo;
      virtual void beginRun(const edm::Run&, const edm::EventSetup&);
      
   private:
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;


      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
HSCPHUNT::HSCPHUNT(const edm::ParameterSet& iConfig)

{
  //now do what ever initialization is needed

}


HSCPHUNT::~HSCPHUNT()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

bool bigmag (const GlobalPoint& Point1, const GlobalPoint& Point2){
  if(Point2.mag() > Point1.mag()) return true;
  else return false;
}

float etarange(float eta1,float eta2,float eta3){
  float etamax = eta1; 
  if(eta2>etamax) etamax = eta2;
  if(eta3>etamax) etamax = eta3;

  float etamin = eta1;
  if(eta2<etamin) etamin = eta2;
  if(eta3<etamin) etamin = eta3;

  return fabs(etamax-etamin);
} 

float dist(float phi1,float phi2){
  if(fabs(phi1-phi2)>3.14159265) return 2*3.1415926535-fabs(phi1-phi2);
  else return fabs(phi1-phi2);
}

float dist3(float phi1,float phi2,float phi3){
  return dist(phi1,phi2)+dist(phi2,phi3)+dist(phi3,phi1);
}

// ------------ method called to for each event  ------------
void
HSCPHUNT::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;

   // ================
   // RPC recHits
   // ================
   Handle<RPCRecHitCollection> rpcRecHits; 
   iEvent.getByLabel("rpcRecHits","",rpcRecHits);
   //   iEvent.getByType(rpcRecHits);

   // count the number of RPC rechits
   int nRPC = 0;


   RPCRecHitCollection::const_iterator recHit;
      
   for (recHit = rpcRecHits->begin(); recHit != rpcRecHits->end(); recHit++) {
     //    RPCDetId id = (RPCDetId)(*recHit).rpcId();
     //    LocalPoint rhitlocal = (*recHit).localPosition();
     nRPC++;
   }

   //if(nRPC!=0) continue;
   
   //sort(sortRecHits.begin(), sortRecHits.end(), minibx);

   std::cout<<"The Number of Rec Hits is "<<nRPC<<std::endl;

   std::vector<GlobalPoint> GlobalPoints;
   std::vector<GlobalPoint> BestAngularMatch;

   for (recHit = rpcRecHits->begin(); recHit != rpcRecHits->end(); recHit++) {
     RPCDetId rollId = (RPCDetId)(*recHit).rpcId();
     RPCGeomServ rpcsrv(rollId);
     LocalPoint recHitPos=recHit->localPosition();    
     const RPCRoll* rollasociated = rpcGeo->roll(rollId);
     const BoundPlane & RPCSurface = rollasociated->surface(); 
     GlobalPoint RecHitInGlobal = RPCSurface.toGlobal(recHitPos);
     
     std::cout<<"\t \t We have an RPC Rec Hit! bx="<<recHit->BunchX()<<" Roll="<<rpcsrv.name()<<" Global Position="<<RecHitInGlobal.phi()<<std::endl;
     
     GlobalPoints.push_back(RecHitInGlobal);
   }

   assert(nRPC==int(GlobalPoints.size()));
   
   
   float phi=0;
   float eta=0;

   float minangularspread = 100.;
   float minetaspread = 100.;
   
   for(std::vector<GlobalPoint>::iterator Point = GlobalPoints.begin(); Point!=GlobalPoints.end(); ++Point){ 
     for(std::vector<GlobalPoint>::iterator Point2 = Point; Point2!=GlobalPoints.end(); ++Point2){if(Point2!=Point){
       for(std::vector<GlobalPoint>::iterator Point3 = Point2; Point3!=GlobalPoints.end(); ++Point3){if(Point3!=Point2 && Point3!=Point){
	 float angularspread = dist3(Point->phi().value(),Point2->phi().value(),Point3->phi().value()); 
	 if(angularspread<minangularspread){
	   minangularspread = angularspread;
	   std::cout<<"For phi"<<Point->phi()<<" "<<Point2->phi()<<" "<<Point3->phi()<<std::endl;
	   phi=(Point->phi().value()+Point2->phi().value()+Point3->phi().value())/3.; //implementar average
	   
	   float etaspread = etarange(float(Point->eta()),float(Point2->eta()),float(Point3->eta()));
	   if(etaspread<0.2){
	     minetaspread = etaspread;
	     std::cout<<"For eta"<<Point->eta()<<" "<<Point2->eta()<<" "<<Point3->eta()<<std::endl;
	     eta = (float(Point->eta())+float(Point2->eta())+float(Point3->eta()))/3.;
	     BestAngularMatch.clear();
	     BestAngularMatch.push_back(*Point);
	     BestAngularMatch.push_back(*Point2);
	     BestAngularMatch.push_back(*Point3);
	   }
	 }
       }}
     }}
   }

   assert(minangularspread!=100); 

   if(minetaspread!=100.){
     std::cout<<" candidate phi="<<phi<<" angularspread"<<minangularspread<<std::endl;
     std::cout<<" candidate eta="<<eta<<" etaspread"<<minetaspread<<std::endl;
     
     std::sort(BestAngularMatch.begin(), BestAngularMatch.end(), bigmag);
     
     for(std::vector<GlobalPoint>::iterator Point = BestAngularMatch.begin(); Point!=BestAngularMatch.end(); ++Point){
       std::cout<<Point->mag()<<" ";
     }
     std::cout<<std::endl;
   }
   else std::cout<<"Not coincidence in eta"<<std::endl;
   
}
// ------------ method called once each job just before starting event loop  ------------

void HSCPHUNT::beginRun(const edm::Run& run, const edm::EventSetup& iSetup){
  iSetup.get<MuonGeometryRecord>().get(rpcGeo);
}

// ------------ method called once each job just after ending the event loop  ------------
void 
HSCPHUNT::endJob() {
}

//define this as a plug-in
DEFINE_FWK_MODULE(HSCPHUNT);

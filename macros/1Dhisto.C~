#include "Riostream.h"
#include <fstream>
#include <iomanip>
#include <vector>
#include <string>

float GetMean_0(TH1F * histo){
  float mean=0;
  for(int bin=2; bin<=histo->GetNbinsX(); bin++){
    mean=mean+float(bin)*float(histo->GetBinContent(bin));
  }
  
  float denominator = float(histo->Integral())-float(histo->GetBinContent(1));
  cout<<"First Bin="<<histo->GetBinContent(1)<<endl;
  cout<<"Zero Bin="<<histo->GetBinContent(0)<<endl;
  if(denominator>0) mean=2.*mean/(denominator);

  return mean;
  
}

void setHisto(TH1F * histo){
  histo->GetXaxis()->LabelsOption("v");
  histo->GetXaxis()->SetLabelSize(0.020);
  histo->SetMarkerStyle(21);
  histo->SetMarkerColor(2);
  histo->Draw("P");         
}

void setHistonormalized(TH1F * histo,int sty){
  histo->GetXaxis()->LabelsOption("v");
  histo->GetXaxis()->SetLabelSize(0.020);
  histo->SetMarkerStyle(sty);
  histo->SetMarkerColor(2);
  histo->DrawNormalized("P");         
}

void setHistosame(TH1F * histo, int sty){
  histo->GetXaxis()->LabelsOption("v");
  histo->GetXaxis()->SetLabelSize(0.020);
  histo->SetMarkerStyle(sty);
  histo->SetMarkerColor(2);
  histo->DrawNormalized("Psame");         
}

float masked(TFile * file){

  float total=0;
  TH1F * allmasked[10];
  
  allmasked[0]= (TH1F*) (file->Get("GlobMaskedWheel_-2near"));
  allmasked[1]= (TH1F*) (file->Get("GlobMaskedWheel_-1near"));
  allmasked[2]= (TH1F*) (file->Get("GlobMaskedWheel_0near"));
  allmasked[3]= (TH1F*) (file->Get("GlobMaskedWheel_1near"));
  allmasked[4]= (TH1F*) (file->Get("GlobMaskedWheel_2near"));
  allmasked[5]= (TH1F*) (file->Get("GlobMaskedWheel_2far"));
  allmasked[6]= (TH1F*) (file->Get("GlobMaskedWheel_-2far"));
  allmasked[7]= (TH1F*) (file->Get("GlobMaskedWheel_-1far"));
  allmasked[8]= (TH1F*) (file->Get("GlobMaskedWheel_0far"));
  allmasked[9]= (TH1F*) (file->Get("GlobMaskedWheel_1far"));

  for(int i=0;i<10;i++) total = total + allmasked[i]->Integral();

  total = (total/1020);

  std::cout<<total<<std::endl;
  
  delete allmasked[0];

  return total;
}

float maskedendcap(TFile * file){

  float total=0;
  TH1F * allmasked[12];
  
  allmasked[0]= (TH1F*) (file->Get("GlobMaskedDisk_3near"));  
  allmasked[1]= (TH1F*) (file->Get("GlobMaskedDisk_2near"));  
  allmasked[2]= (TH1F*) (file->Get("GlobMaskedDisk_1near"));  
  allmasked[3]= (TH1F*) (file->Get("GlobMaskedDisk_m3near")); 
  allmasked[4]= (TH1F*) (file->Get("GlobMaskedDisk_m2near")); 
  allmasked[5]= (TH1F*) (file->Get("GlobMaskedDisk_m1near")); 
  allmasked[6]= (TH1F*) (file->Get("GlobMaskedDisk_3far"));  
  allmasked[7]= (TH1F*) (file->Get("GlobMaskedDisk_2far"));  
  allmasked[8]= (TH1F*) (file->Get("GlobMaskedDisk_1far"));  
  allmasked[9]= (TH1F*) (file->Get("GlobMaskedDisk_m3far")); 
  allmasked[10]=(TH1F*) (file->Get("GlobMaskedDisk_m2far")); 
  allmasked[11]=(TH1F*) (file->Get("GlobMaskedDisk_m1far")); 

  for(int i=0;i<12;i++) total = total + allmasked[i]->Integral();

  total = (total/1296);

  std::cout<<total<<std::endl;
  
  delete allmasked[0];

  return total;
}

void history(){
  //gROOT->Reset();
  gStyle->SetOptStat(0);
  
  ifstream fileruns;
  ofstream allinfo;

  //--hvth info
  
  map<string,float> hvbarrelinfo;
  map<string,int> thbarrelinfo;
  map<string,float> hvendcapinfo;
  map<string,int> thendcapinfo;

  ifstream hvthbarrel;
  ifstream hvthendcap;

  allinfo.open("allinfo.txt");

  fileruns.open("runslist.txt");
  hvthbarrel.open("/afs/cern.ch/user/c/carrillo/historyplots/hvthbarrel.txt");
  hvthendcap.open("/afs/cern.ch/user/c/carrillo/historyplots/hvthendcap.txt");
  
  string Run;
  float hv=0;
  int th=0;

  cout<<"Reading hv barrel"<<endl;
  while(!hvthbarrel.eof()){
    hvthbarrel >>Run >>hv >>th;
    if(Run.size()==0) continue;
    std::cout<<Run<<" "<<hv<<" "<<th<<std::endl;  
    hvbarrelinfo[Run]=hv;
    thbarrelinfo[Run]=th;
  }

  cout<<"Reading hv endcap"<<endl;
  while(!hvthendcap.eof()){
    hvthendcap >>Run >>hv >>th;
    if(Run.size()==0) continue;
    std::cout<<Run<<" "<<hv<<" "<<th<<std::endl;  
    hvendcapinfo[Run]=hv;
    thendcapinfo[Run]=th;
  }
  
  
  map<string,int> durationinfo;
  
  map<string,float> channelcubarrelinfo;
  map<string,float> cubarrelinfo;
  map<string,float> errorcubarrelinfo;
  map<string,float> sensorstpbarrelinfo;
  map<string,float> tpbarrelinfo;
  map<string,float> errortpbarrelinfo;

  map<string,float> channelcuendcapinfo;
  map<string,float> cuendcapinfo;
  map<string,float> errorcuendcapinfo;
  map<string,float> sensorstpendcapinfo;
  map<string,float> tpendcapinfo;
  map<string,float> errortpendcapinfo;

  ifstream cutp;

  cutp.open("/afs/cern.ch/user/c/carrillo/historyplots/cutp.txt");
  
  string Run;
  float cu=0;
  float tp=0;
  
  while(!cutp.eof()){
    cutp >>Run >>durationinfo[Run] 
	 >>channelcubarrelinfo[Run] >>cubarrelinfo[Run] >>errorcubarrelinfo[Run] 
	 >>sensorstpbarrelinfo[Run] >>tpbarrelinfo[Run] >>errortpbarrelinfo[Run] 
	 >>channelcuendcapinfo[Run] >>cuendcapinfo[Run] >>errorcuendcapinfo[Run] 
	 >>sensorstpendcapinfo[Run] >>tpendcapinfo[Run] >>errortpendcapinfo[Run];
    
    std::cout<<Run<<" "<<cubarrelinfo[Run]<<" "<<errorcubarrelinfo[Run]<<" "<<tpbarrelinfo[Run]<<" "<<errortpbarrelinfo[Run]<<std::endl;
    if(Run.size()==0) continue;
  }
  
  //----------


  string run;
 
  std::cout<<"Before the while "<<std::endl;

  const int N=118;

  TH1F * EventsH = new TH1F("EventsH","Number of events History",N,0,N);
  TH1F * durationH = new TH1F("durationH","Duration of each run in seconds",N,0,N);
  TH1F * DoubleGapBarrelH = new TH1F("DoubleGapBarrelH","Double Gap Mean Efficiency Barrel",N,0,N);
  TH1F * DoubleGapEndCapH = new TH1F("DoubleGapEndCapH","Double Gap Mean Efficiency EndCap",N,0,N);
  TH1F * DoubleGapBarrelH_0 = new TH1F("DoubleGapBarrelH_0","Double Gap Mean Efficiency Barrel without masked rolls",N,0,N);
  TH1F * DoubleGapEndCapH_0 = new TH1F("DoubleGapEndCapH_0","Double Gap Mean Efficiency EndCap without masked rolls",N,0,N);
  TH1F * bxbarrelH = new TH1F("bxbarrelH","Mean Bunch Crossing Barrel (error bars Mean RMS)",N,0,N);
  TH1F * bxendcapH = new TH1F("bxendcapH","Mean Bunch Crossing EndCap (error bars Mean RMS)",N,0,N);
  TH1F * rmsbxbarrelH = new TH1F("rmsbxbarrelH","RMS Bunch Crossing Barrel",N,0,N);
  TH1F * rmsbxendcapH = new TH1F("rmsbxendcapH","RMS Bunch Crossing EndCap",N,0,N);
  TH1F * CLSH = new TH1F("CLSH","Cluster Size for the Barrel (error bars Mean RMS)",N,0,N);
  TH1F * hvbarrelH = new TH1F("hvbarrelH","High Voltage for the Barrel",N,0,N);
  TH1F * thbarrelH = new TH1F("thbarrelH","Threshold for the the Barrel",N,0,N);
  TH1F * hvendcapH = new TH1F("hvendcapH","High Voltage for the EndCap",N,0,N);
  TH1F * thendcapH = new TH1F("thendcapH","Threshold for the EndCap",N,0,N);
  TH1F * maskedH = new TH1F("maskedH","Average Percentage of strips without data per roll in the Barrel",N,0,N);
  TH1F * maskedendcapH = new TH1F("maskedendcapH","Average Percentage of strips without data per roll in the End Cap",N,0,N);
  TH1F * sensorstpbarrelH = new TH1F("sensorstpbarrelH","Number of sensors in barrel for average temperature",N,0,N);
  TH1F * tpbarrelH = new TH1F("tpbarrelH","Average temperature for the barrel",N,0,N);
  TH1F * sensorstpendcapH = new TH1F("sensorstpendcapH","Number of sensors in endcap for average temperature",N,0,N);
  TH1F * tpendcapH = new TH1F("tpendcapH","Average temperature for the endcap",N,0,N);
  TH1F * channelcubarrelH = new TH1F("channelcubarrelH","Number of channels in barrel for the average current",N,0,N);
  TH1F * cubarrelH = new TH1F("cubarrelH","Average current for the barrel",N,0,N);
  TH1F * cuendcapH = new TH1F("cuendcapH","Average current for the endcap",N,0,N);
  TH1F * channelcuendcapH = new TH1F("channelcuendcapH","Number of channels in endcap for the average current",N,0,N);
  
  int index=1;

  std::cout<<"Before the while "<<std::endl;

  int counter = 0;
  while(!fileruns.eof()){
    getline(fileruns,run);
    std::cout<<" In run = "<<run<<std::endl;
    if(run.size()==0) continue;
    TFile * theFile = new TFile(("eff"+run+".root").c_str());
    TFile * secFile = new TFile(("sec"+run+".root").c_str());

    if(!theFile) continue;
    if(!secFile) continue;
    
    cout<<"Both Files exsit"<<endl;

    //Set Run Axis
    EventsH->GetXaxis()->SetBinLabel(index,run.c_str());
    durationH->GetXaxis()->SetBinLabel(index,run.c_str());
    DoubleGapBarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    DoubleGapEndCapH->GetXaxis()->SetBinLabel(index,run.c_str());
    DoubleGapBarrelH_0->GetXaxis()->SetBinLabel(index,run.c_str());
    DoubleGapEndCapH_0->GetXaxis()->SetBinLabel(index,run.c_str());
    bxbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    bxendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    rmsbxbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    rmsbxendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    CLSH->GetXaxis()->SetBinLabel(index,run.c_str());
    thbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    hvbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    thendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    hvendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    maskedH->GetXaxis()->SetBinLabel(index,run.c_str());
    maskedendcapH->GetXaxis()->SetBinLabel(index,run.c_str());

    sensorstpbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    tpbarrelH->GetXaxis()->SetBinLabel(index,run.c_str());

    sensorstpendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    tpendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    	       
    channelcubarrelH->GetXaxis()->SetBinLabel(index,run.c_str());
    cubarrelH->GetXaxis()->SetBinLabel(index,run.c_str());

    channelcuendcapH->GetXaxis()->SetBinLabel(index,run.c_str());    
    cuendcapH->GetXaxis()->SetBinLabel(index,run.c_str());
    
    TH1F * Statistics = (TH1F*) (theFile->Get("DQMData/Muons/MuonSegEff/Statistics"));
    EventsH->SetBinContent(index,Statistics->GetBinContent(1));

    if(Statistics->GetBinContent(1)<500000) continue;
    allinfo<<run<<" "<<thbarrelinfo[run]<<" "<<hvbarrelinfo[run]<<" "<<thendcapinfo[run]<<" "<<hvendcapinfo[run]<<endl;
    counter++;

    durationH->SetBinContent(index,durationinfo[run]);
    
    TH1F * DoubleGapBarrel = (TH1F*) (secFile->Get("DoubleGapBarrel"));
    DoubleGapBarrelH->SetBinContent(index,DoubleGapBarrel->GetMean());
    DoubleGapBarrelH_0->SetBinContent(index,GetMean_0(DoubleGapBarrel));

    TH1F * DoubleGapEndCap = (TH1F*) (secFile->Get("DoubleGapEndCap"));
    DoubleGapEndCapH->SetBinContent(index,DoubleGapEndCap->GetMean());
    DoubleGapEndCapH_0->SetBinContent(index,GetMean_0(DoubleGapEndCap));

    TH2F * bxbarrel = (TH2F*) (secFile->Get("BXBarrel"));
    bxbarrelH->SetBinContent(index,bxbarrel->ProjectionX("_px")->GetMean());
    bxbarrelH->SetBinError(index,bxbarrel->ProjectionX("_px")->GetRMS());

    rmsbxbarrelH->SetBinContent(index,bxbarrel->ProjectionX("_px")->GetRMS());
    
    TH2F * bxendcap = (TH2F*) (secFile->Get("BXEndCap"));
    bxendcapH->SetBinContent(index,bxendcap->ProjectionX("_px")->GetMean());
    bxendcapH->SetBinError(index,bxendcap->ProjectionX("_px")->GetRMS());
    
    rmsbxendcapH->SetBinContent(index,bxendcap->ProjectionX("_px")->GetRMS());
    
    TH1F * CLS = (TH1F*) (secFile->Get("CLS"));
    CLSH->SetBinContent(index,CLS->GetMean());
    CLSH->SetBinError(index,CLS->GetRMS());
    
    hvbarrelH->SetBinContent(index,hvbarrelinfo[run]);
    thbarrelH->SetBinContent(index,thbarrelinfo[run]);

    hvendcapH->SetBinContent(index,hvendcapinfo[run]);
    thendcapH->SetBinContent(index,thendcapinfo[run]);
    
    maskedH->SetBinContent(index,masked(secFile));
    maskedendcapH->SetBinContent(index,maskedendcap(secFile));
    
    if(tpbarrelinfo[run]!=0){
      if(sensorstpbarrelinfo[run]>250){
	tpbarrelH->SetBinContent(index,tpbarrelinfo[run]);
	tpbarrelH->SetBinError(index,errortpbarrelinfo[run]);
      }
      sensorstpbarrelH->SetBinContent(index,sensorstpbarrelinfo[run]);
    }
    
    if(tpendcapinfo[run]!=0){
      if(sensorstpendcapinfo[run]>50){
	tpendcapH->SetBinContent(index,tpendcapinfo[run]);
	tpendcapH->SetBinError(index,errortpendcapinfo[run]);
      }
      sensorstpendcapH->SetBinContent(index,sensorstpendcapinfo[run]);
    }
    	       
    if(cubarrelinfo[run]!=0){
      if(channelcubarrelinfo[run]>430){
	cubarrelH->SetBinContent(index,cubarrelinfo[run]);
	cubarrelH->SetBinError(index,errorcubarrelinfo[run]);
      }
      channelcubarrelH->SetBinContent(index,channelcubarrelinfo[run]);
    }

    if(cuendcapinfo[run]!=0){
      if(channelcuendcapinfo[run]>170){
	cuendcapH->SetBinContent(index,cuendcapinfo[run]);
	cuendcapH->SetBinError(index,errorcuendcapinfo[run]);
      }
      channelcuendcapH->SetBinContent(index,channelcuendcapinfo[run]);
    }
    
    delete theFile;
    index++;
  }
  
  cout<<"counter="<<counter<<endl;

  TCanvas * Ca0 = new TCanvas("Ca0","History",1200,800);

  EventsH->GetYaxis()->SetTitle("Number of Events per run");
  setHisto(EventsH);
  Ca0->SaveAs("EventsH.png");
  Ca0->Clear();

  durationH->GetYaxis()->SetTitle("Duration of the run (s)");
  setHisto(durationH);
  Ca0->SaveAs("durationH.png");
  Ca0->Clear();

  DoubleGapBarrelH->GetYaxis()->SetTitle("Mean Efficiency %");
  setHisto(DoubleGapBarrelH);
  Ca0->SaveAs("DoubleGapBarrelH.png");
  Ca0->Clear();
  
  DoubleGapEndCapH->GetYaxis()->SetTitle("Mean Efficiency %");
  setHisto(DoubleGapEndCapH);
  Ca0->SaveAs("DoubleGapEndCapH.png");
  Ca0->Clear();

  DoubleGapBarrelH_0->GetYaxis()->SetTitle("Mean Efficiency %");
  setHisto(DoubleGapBarrelH_0);
  Ca0->SaveAs("DoubleGapBarrelH_0.png");
  Ca0->Clear();
  
  DoubleGapEndCapH_0->GetYaxis()->SetTitle("Mean Efficiency %");
  setHisto(DoubleGapEndCapH_0);
  Ca0->SaveAs("DoubleGapEndCapH_0.png");
  Ca0->Clear();

  bxendcapH->GetYaxis()->SetTitle("Mean BX (bx units)");
  //bxendcapH->SetMinimum(-10);
  //bxendcapH->SetMaximum(10);
  setHisto(bxendcapH);
  Ca0->SaveAs("bxendcapH.png");
  Ca0->Clear();

  bxbarrelH->GetYaxis()->SetTitle("Mean BX (bx units)");
  //bxbarrelH->SetMinimum(-10);
  //bxbarrelH->SetMaximum(10);
  setHisto(bxbarrelH);
  Ca0->SaveAs("bxbarrelH.png");
  Ca0->Clear();

  rmsbxendcapH->GetYaxis()->SetTitle("RMS of the Mean BX Distribution (bx units)");
  //rmsbxendcapH->SetMinimum(-10);
  //rmsbxendcapH->SetMaximum(10);
  setHisto(rmsbxendcapH);
  Ca0->SaveAs("rmsbxendcapH.png");
  Ca0->Clear();
 
  rmsbxbarrelH->GetYaxis()->SetTitle("RMS of the Mean BX Distribution (bx units)");
  //rmsbxbarrelH->SetMinimum(-10);
  //rmsbxbarrelH->SetMaximum(10);
  setHisto(rmsbxbarrelH);
  Ca0->SaveAs("rmsbxbarrelH.png");
  Ca0->Clear();

  CLSH->GetYaxis()->SetTitle("Mea Cluster Size (strips)");
  setHisto(CLSH);
  Ca0->SaveAs("CLSH.png");
  Ca0->Clear();

  hvbarrelH->GetYaxis()->SetTitle("High Voltage (kV)");
  setHisto(hvbarrelH);
  Ca0->SaveAs("hvbarrelH.png");
  Ca0->Clear();

  hvendcapH->GetYaxis()->SetTitle("High Voltage (kV)");
  setHisto(hvendcapH);
  Ca0->SaveAs("hvendcapH.png");
  Ca0->Clear();

  thendcapH->GetYaxis()->SetTitle("Threshold(mV)");
  setHisto(thendcapH);
  Ca0->SaveAs("thendcapH.png");
  Ca0->Clear();

  thbarrelH->GetYaxis()->SetTitle("Threshold(mV)");
  setHisto(thbarrelH);
  Ca0->SaveAs("thbarrelH.png");
  Ca0->Clear();

  maskedH->GetYaxis()->SetTitle("%");
  setHisto(maskedH);
  Ca0->SaveAs("maskedH.png");
  Ca0->Clear();

  maskedendcapH->GetYaxis()->SetTitle("%");
  setHisto(maskedendcapH);
  Ca0->SaveAs("maskedendcapH.png");
  Ca0->Clear();
  

  //--Temeperature and Current ---

  sensorstpbarrelH->GetYaxis()->SetTitle("Number of sensors");
  setHisto(sensorstpbarrelH);
  Ca0->SaveAs("sensorstpbarrelH.png");
  Ca0->Clear();

  tpbarrelH->GetYaxis()->SetTitle("Celsius");
  setHisto(tpbarrelH);
  tpbarrelH->SetMinimum(17);
  tpbarrelH->SetMaximum(23);
  Ca0->SaveAs("tpbarrelH.png");
  Ca0->Clear();

  sensorstpendcapH->GetYaxis()->SetTitle("Number of sensors");
  setHisto(sensorstpendcapH);
  Ca0->SaveAs("sensorstpendcapH.png");
  Ca0->Clear();

  tpendcapH->GetYaxis()->SetTitle("Celsius");
  setHisto(tpendcapH);
  tpendcapH->SetMinimum(17);
  tpendcapH->SetMaximum(23);
  Ca0->SaveAs("tpendcapH.png");
  Ca0->Clear();
	  
  channelcubarrelH->GetYaxis()->SetTitle("Number of channels");
  setHisto(channelcubarrelH);
  Ca0->SaveAs("channelcubarrelH.png");
  Ca0->Clear();

  cubarrelH->GetYaxis()->SetTitle("uA");
  setHisto(cubarrelH);
  Ca0->SaveAs("cubarrelH.png");
  Ca0->Clear();

  channelcuendcapH->GetYaxis()->SetTitle("Number of channels");
  setHisto(channelcuendcapH);
  Ca0->SaveAs("channelcuendcapH.png");
  Ca0->Clear();

  cuendcapH->GetYaxis()->SetTitle("uA");
  setHisto(cuendcapH);
  Ca0->SaveAs("cuendcapH.png");
  Ca0->Clear();
  
  //-------------------------------

  setHistonormalized(CLSH,21);
  setHistosame(DoubleGapBarrelH,22);
  setHistosame(hvbarrelH,23);
  setHistosame(thbarrelH,24);

  TLegend *leg = new TLegend(0.1295987,0.1437824,0.4297659,0.2448187,NULL,"brNDC");
  leg->AddEntry(DoubleGapBarrelH,"Efficiency","plc");
  leg->AddEntry(CLSH,"Cluster Size","plc");
  leg->AddEntry(hvbarrelH,"High Voltage","plc");
  leg->AddEntry(thbarrelH,"Threshold","plc");
  leg->Draw("same");

  Ca0->SaveAs("all.png");

  TFile *  theFileOut = new TFile("summaryCRAFT09.root", "RECREATE");
  theFileOut->cd();
  CLSH->Write();
  hvbarrelH->Write();
  thbarrelH->Write();
  hvendcapH->Write();
  thendcapH->Write();
  DoubleGapBarrelH->Write();
  EventsH->Write();
  durationH->Write();
  DoubleGapBarrelH->Write();
  DoubleGapEndCapH->Write();
  DoubleGapBarrelH_0->Write(); 
  DoubleGapEndCapH_0->Write(); 
  bxbarrelH->Write();
  bxendcapH->Write();
  rmsbxbarrelH->Write();
  rmsbxendcapH->Write();
  CLSH->Write();
  hvbarrelH->Write();
  thbarrelH->Write();
  hvendcapH->Write();
  thendcapH->Write();
  maskedH->Write();
  maskedendcapH->Write();
  sensorstpbarrelH->Write();
  tpbarrelH->Write();
  sensorstpendcapH->Write();
  tpendcapH->Write();
  channelcubarrelH->Write();
  cubarrelH->Write();
  cuendcapH->Write();
  channelcuendcapH->Write();
  theFileOut->Write();
}

// -*- C++ -*-
//
// Package:    SIMHITANALIZER
// Class:      SIMHITANALIZER
// 
/**\class SIMHITANALIZER SIMHITANALIZER.cc beta/SIMHITANALIZER/src/SIMHITANALIZER.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Camilo Andres Carrillo Montoya
//         Created:  Mon Feb 23 15:41:52 CET 2009
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "DataFormats/RPCDigi/interface/RPCDigi.h"
#include "DataFormats/RPCDigi/interface/RPCDigiCollection.h"
#include <DataFormats/RPCRecHit/interface/RPCRecHit.h>
#include "DataFormats/RPCRecHit/interface/RPCRecHitCollection.h"
#include <DataFormats/MuonDetId/interface/RPCDetId.h>
#include <Geometry/RPCGeometry/interface/RPCGeometry.h>
#include "Geometry/RPCGeometry/interface/RPCGeomServ.h"
#include <DataFormats/GeometrySurface/interface/LocalError.h>
#include <DataFormats/GeometryVector/interface/LocalPoint.h>
#include "DataFormats/GeometrySurface/interface/Surface.h"
#include "DataFormats/DetId/interface/DetId.h"
#include <Geometry/Records/interface/MuonGeometryRecord.h>
#include "Geometry/Records/interface/GlobalTrackingGeometryRecord.h"
#include "beta/BETA/interface/BETA.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/Candidate/interface/CandMatchMap.h"
#include "DataFormats/Candidate/interface/CandidateFwd.h"
#include "SimGeneral/HepPDTRecord/interface/ParticleDataTable.h"

#include "MagneticField/Engine/interface/MagneticField.h"
#include "MagneticField/Records/interface/IdealMagneticFieldRecord.h"
#include "Geometry/CommonDetUnit/interface/GeomDet.h"
#include <DataFormats/GeometrySurface/interface/LocalError.h>
#include <DataFormats/GeometryVector/interface/LocalPoint.h>
#include "DataFormats/GeometrySurface/interface/Surface.h"
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"

#include "TrackingTools/GeomPropagators/interface/Propagator.h"
#include "TrackingTools/GeomPropagators/interface/AnalyticalPropagator.h"
#include "TrackPropagation/SteppingHelixPropagator/interface/SteppingHelixPropagator.h"

#include "SimDataFormats/Track/interface/SimTrack.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"
#include "SimDataFormats/Vertex/interface/SimVertex.h"
#include "SimDataFormats/Vertex/interface/SimVertexContainer.h"
#include "FastSimulation/Tracking/test/FastTrackAnalyzer.h"

#include "TrackingTools/Records/interface/TrackingComponentsRecord.h"
#include "RecoMuon/TrackingTools/interface/MuonPatternRecoDumper.h"

#include "DataFormats/MuonDetId/interface/MuonSubdetId.h"

#include <cmath>

//Root
#include "TFile.h"
#include "TF1.h"
#include "TH1F.h"
#include "TH1.h"
#include "TH2F.h"
#include "TROOT.h"
#include "TMath.h"
#include "TCanvas.h"

//Track
#include "DataFormats/TrajectorySeed/interface/TrajectorySeedCollection.h"
#include "TrackingTools/PatternTools/interface/Trajectory.h"
#include "TrackingTools/PatternTools/interface/TrajTrackAssociation.h"
#include "DataFormats/TrackCandidate/interface/TrackCandidate.h" 
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"

//
// class decleration
//

class SIMHITANALIZER : public edm::EDAnalyzer {
   public:
      explicit SIMHITANALIZER(const edm::ParameterSet&);
      ~SIMHITANALIZER();


   private:
      virtual void beginJob(const edm::EventSetup&) ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;

      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
SIMHITANALIZER::SIMHITANALIZER(const edm::ParameterSet& iConfig)

{
   //now do what ever initialization is needed

}


SIMHITANALIZER::~SIMHITANALIZER()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to for each event  ------------
void
SIMHITANALIZER::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
   
   std::cout << " Getting the SimHits " <<std::endl;
   std::vector<edm::Handle<edm::PSimHitContainer> > theSimHitContainers;
   iEvent.getManyByType(theSimHitContainers);
   std::cout << " The Number of sim Hits is  " << theSimHitContainers.size() <<std::endl;

   //std::cout<<"Getting the RPCRecHits"<<std::endl;
   //edm::Handle<RPCRecHitCollection> rpcHits;
   //iEvent.getByLabel("rpcRecHits","",rpcHits);
   //std::cout << " The Number of RPC Rec Hits is  " <<rpcHits->size()<<std::endl;
   /*
   std::cout <<"Digi Getting the RPC Digis"<<std::endl;
   edm::Handle<RPCDigiCollection> rpcDigis;
   iEvent.getByLabel("muonRPCDigis", rpcDigis);

   
   int digiSize = 0;
   RPCDigiCollection::DigiRangeIterator rpcDigiCI;
   for(rpcDigiCI = rpcDigis->begin();rpcDigiCI!=rpcDigis->end();rpcDigiCI++){
     std::cout<<(*rpcDigiCI).first<<std::endl;;
     const RPCDigiCollection::Range& range = (*rpcDigiCI).second;    
     for (RPCDigiCollection::const_iterator digiIt = range.first;
          digiIt!=range.second;++digiIt){
       digiSize++;
     }
   }

   std::cout << " The Number of RPC Digis is  " <<digiSize<<std::endl;
   */

   //SimTrack Stuff

   std::vector<PSimHit> theSimHits;
   
   for (int i = 0; i < int(theSimHitContainers.size()); i++){
     theSimHits.insert(theSimHits.end(),theSimHitContainers.at(i)->begin(),theSimHitContainers.at(i)->end());
   }

   for (std::vector<PSimHit>::const_iterator iHit = theSimHits.begin(); iHit != theSimHits.end(); iHit++){
     
     if((*iHit).particleType()== -2000015){//Only HSCPs
       
       DetId theDetUnitId((*iHit).detUnitId());
       
       DetId simdetid= DetId((*iHit).detUnitId());

       if(simdetid.det()==DetId::Muon &&  simdetid.subdetId()== MuonSubdetId::RPC){
	 RPCDetId RPCId(theDetUnitId);
	 RPCGeomServ rpcsrv(RPCId);
	 std::cout<<"\t\t\t We have an RPC Sim Hit! in"<<rpcsrv.name()<<" t="<<(*iHit).timeOfFlight()<<"ns local postition="<<(*iHit).localPosition();	 
	 
	 //getting the rechits in the same Roll
	 typedef std::pair<RPCRecHitCollection::const_iterator, RPCRecHitCollection::const_iterator> rangeRecHits;
	 rangeRecHits recHitCollection =  rpcHits->get(RPCId);

	 
	 if(recHitCollection.first==recHitCollection.second){
	   std::cout<<"NR"<<std::endl;
	 }else{//loop on the recHits with the same Id
	   
	   float dxmin=9999.;
	   
	   RPCRecHit rpcRecHitMin; 
	   bool foundmin=false;
	   
	   RPCRecHitCollection::const_iterator recIt;
	   for (recIt = recHitCollection.first;recIt != recHitCollection.second ; recIt++){
	     float dx=(*recIt).localPosition().x()-(*iHit).localPosition().x();
	     float dy=(*recIt).localPosition().y()-(*iHit).localPosition().y();
	     float dist=sqrt(dx*dx+dy*dy);
	     
	     //std::cout<<"\t\t\t\t dist="<<dist<<" dx="<<dx<<" dy="<<dy<<std::endl;
	     
	     if(fabs(dx)<fabs(dxmin)){
	       dxmin=dx;
	       //In the minimum is for sure the RecHit Associated to our RPCSimHit for a HSCP if it was reconstructed!!!
	       rpcRecHitMin=(*recIt); 
	       foundmin=true;
	     }
	     
	     if(foundmin){
	       std::cout<<rpcRecHitMin.BunchX()<<std::endl;
	     }else{
	       std::cout<<"NR"<<std::endl;
	     }
	   }
	 }
       }
     }
   }




}


// ------------ method called once each job just before starting event loop  ------------
void 
SIMHITANALIZER::beginJob(const edm::EventSetup&)
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
SIMHITANALIZER::endJob() {
}

//define this as a plug-in
DEFINE_FWK_MODULE(SIMHITANALIZER);
